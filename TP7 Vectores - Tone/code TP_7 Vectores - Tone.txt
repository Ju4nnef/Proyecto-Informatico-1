#define NOTE_A4   349
#define NOTE_A5   311
#define NOTE_AS4  262
#define NOTE_AS5  330
#define NOTE_AS6  277
#define NOTE_B4   247
#define NOTE_B5   220
#define NOTE_C5   206
#define NOTE_C6   196
#define NOTE_CS5  311
#define NOTE_CS6  277
#define NOTE_D5   330
#define NOTE_D6   247
#define NOTE_DS4  220
#define NOTE_DS5  208
#define NOTE_DS6  262
#define NOTE_E4   175
#define NOTE_E5   233
#define NOTE_E6   330
#define NOTE_ES6  440
#define NOTE_F5   392
#define NOTE_F6   466
#define NOTE_FS6  330
#define NOTE_G4   208
#define NOTE_G5   294
#define NOTE_G6   440
#define NOTE_GS4  392
#define NOTE_GS6  494
#define SILENCIO 0


#define length(vec,tipo) sizeof(vec)/sizeof(tipo)
#define BUZZ 10

 // 1 =  1000/1   ->  1000 redonda
//  2 =  1000/2   ->   500 blanca
//  4 =  1000/4   ->   250 negra
//  8 =  1000/8   ->   125 corchea
// 16 =  1000/16  ->   62 semi-corchea

int nota[]   = {NOTE_F5,NOTE_F5,NOTE_F5,NOTE_F5,NOTE_DS5,NOTE_C5,NOTE_E5,NOTE_CS5,SILENCIO,NOTE_B4,NOTE_DS5,NOTE_A4,NOTE_GS4,NOTE_G4,NOTE_B4,NOTE_CS5,SILENCIO,NOTE_DS5,NOTE_CS5,NOTE_E5,NOTE_B4,NOTE_D5,NOTE_AS4,NOTE_GS4,NOTE_C5,NOTE_A4,SILENCIO,NOTE_DS4,NOTE_E4,NOTE_GS4,NOTE_AS4,NOTE_E5,NOTE_A5,NOTE_G5,NOTE_AS5,SILENCIO,NOTE_E5,SILENCIO,NOTE_GS4,NOTE_D5,NOTE_D5,NOTE_D5,NOTE_D5,NOTE_A5,NOTE_G5,NOTE_C6,NOTE_A5,NOTE_B5,NOTE_G5,NOTE_CS6,NOTE_E6,NOTE_ES6,NOTE_ES6,NOTE_ES6,NOTE_ES6,NOTE_DS6,NOTE_CS6,NOTE_B5,NOTE_E6,NOTE_B5,NOTE_D6,NOTE_AS5,NOTE_D6,SILENCIO,NOTE_DS6,NOTE_B5,NOTE_G5,NOTE_DS6,SILENCIO,NOTE_GS6,NOTE_AS6,NOTE_FS6,NOTE_AS6,NOTE_E6,NOTE_GS6,NOTE_AS6,NOTE_F6,NOTE_F6,NOTE_F6,NOTE_GS6,NOTE_DS6,NOTE_AS6,NOTE_D6,NOTE_A5,NOTE_C6,NOTE_C6,NOTE_C6,NOTE_GS6,NOTE_FS6,NOTE_AS6,NOTE_G6}; //nota
int figura[] = {   2   ,   2   ,   2   ,   2   ,   2    ,   2   ,   2   ,   2    ,   -2   ,    2   ,   2   ,   2   ,   2    ,    2  ,   2   ,   2   ,   -2    ,    2   ,   2    ,   2   ,   2   ,   2   ,    2   ,   2   ,    2   ,   2   ,   -2   ,    2   ,   2   ,    2   ,    2   ,   2   ,   2   ,   2   ,   2    ,   -2   ,   2    ,  -2   ,   2    ,   2   ,   2   ,   2   ,   2   ,   2   ,   2   ,   2   ,   2   ,   2   ,   2   ,    2   ,   2   ,    2   ,    2   ,    2   ,    2   ,    2   ,    2   ,   2   ,   2   ,   2   ,   2   ,   2    ,   2   ,   -2   ,   2    ,   2   ,   2   ,    2   ,   -2   ,    2   ,    2   ,    2   ,    2   ,   2   ,    2   ,    2   ,   2   ,   2   ,   2   ,    2   ,    2   ,    2   ,   2   ,   2   ,   2   ,   2   ,   2   ,    2   ,    2   ,    2   ,   2   }; //cuadraditos 
int BPM = 130;

float tiempoEntreNota = 1.5;                              
int duracionTotalNota= (60000*4) / BPM;
 
                
void setup()
{
}
                
                
void loop() 
{
  //CICLO FOR
  for( int x= 0 ; x < length(nota,int) ; x++ )
  {
      if ( figura[x] >= 0 )
      {
        //figura POSITIVA
        int duracionNota=(duracionTotalNota /figura[x])*tiempoEntreNota;
        tone(BUZZ,nota[x]);
        delay(duracionNota); //el 1.3 no son obligatorios
        noTone(BUZZ);
      }else{
        //figura NEGATIVA
        int duracionNota=(duracionTotalNota /figura[x]*(-1))*tiempoEntreNota;  
        tone(BUZZ,nota[x],duracionNota*0.8);
        delay(duracionNota*1.3);
        noTone(BUZZ);
      } // if-else
  }//for
  
}//loop
